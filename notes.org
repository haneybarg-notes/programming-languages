# -*- after-save-hook: org-latex-export-to-pdf; -*-
#+options: date:nil
#+language: bt-br
#+latex_header: \usepackage[a4paper, margin=2cm]{geometry}
#+latex_header: \usepackage{indentfirst}
#+latex_header: \usepackage[]{babel}
#+latex_header: \usepackage{float}
#+latex_header: \usepackage{color, colortbl}
#+latex_header: \usepackage{titling}
#+latex_header: \setlength{\droptitle}{-1.5cm}
#+latex_header: \hypersetup{ colorlinks = true, urlcolor = blue }
#+latex_header: \definecolor{beige}{rgb}{0.93,0.93,0.82}
#+latex_header: \definecolor{brown}{rgb}{0.4,0.2,0.0}


#+AUTHOR: Fernanda GuimarÃ£es
#+TITLE: Notes LP
* (05/08/19) What are programming languages?
  Programming languages are turing complete. Html  is not a programming language. Assembly is.
  The formal definition is:
  - Syntax
  - Semantics
  -

  Words are easier to remember than numbers.

** Fortran
  IBM. It brought two news:
  - There are variables
  - Control structures (loops, conditionals).

  Parsing: read a chain of characters and transform it into a data structure (a tree).

** Lisp
  Paretheses.

  Based on mathematical functions and lists.

  News:  no need for parsing, built on linked lists.

** ALGOL
  Two news:
  - Type notation
  - Begin and end

** COBOL
   Grace Hopper.

   Looks like a natural language.

** How many are there?
   O'Reilly says that there are 2500, wikipedia says 650. Java is the most popular
   (portability).

*** Different purposes
    - Fortan: scientific calculus
    - Lisp: computer theory
    - COBOL: comercial applications
    - Algol: academic languages

** C
   Denis Reed

   It was made to finish UNIX.

   It's popular because the compiler already came with UNIX.

** PHP
   Recursive name.

   Useful for web servers.

   Came to supply the need for Pearl.

   Came with Apache, not efficient.

* (07/08/19) Types of languages
 State = memory

 Parsing = produce derivation trees for some chain of characters.

 A program in x86 is a set of instructions.

 Prolog isn't a patternized language. 

** Imperatives (state)
   Turing machines.

   - C
   - Cpp
   - Java
   - Python
   - C#
** Declaratives (stateless)
   There are no steps.
*** Functionals
    Lambda calculus.
    - ML
    - Haskell
    - Lisp
    - Erlang
    - Elixir
    - Scala
    - Clojure
*** Logicals
    Horn clause.
    - Prolog
    - Datalog
** Grammars
   - Tokens (terminals)
   - Non-terminals (variables)
   - Production rules
   - Start symbol
*** Types
    - Regulars: super fast.
    - Context-free: can only have a symbol on the left side of production.
    - Context-sensitive: many symbols (right side is bigger or equal to left side).
    - Irrestricted grammar: Turing Machines.
* (12/08/19) Precedence
  Parsing is used in compilers, valgrind, static verification, etc.
  There are two semantics aspects of languages:
  - Associativity
  - Precedence

  In C, there are unary, binary and ternary operators. The closer to the roots, bigger the precedence.

  Attribution is associative to the right.
* (14/08/19) Compilation
  Search for: arithmetic identities of gcc.

  Programming languages are usually compiled (ex assembly), virtualized (ex python) or
  interpreted (ex bash).

  Virtualized are compiled to a virtual machine.

** Why are some programs interpreted, others interpreted and others virtualized?
   Because of efficiency. It's better to compile the program when the execution time is
   really large.
** Compilation
   The classical Sequence:
   [editor] --> source file --> [preprocessor] --> preprocessed source file
   --> [compiler] --> assembly language file --> [assembler] -->
   object file --> [linker] --> executable file -->
   [loader] --> running program in memory

* (19/08/19) Introduction to ML
  Important: an algoritm that in C has less complexity than in ML.
  There isn't implicit coersion. Everything is explicit.

  Declarative Functional language. Follows the lambda-calculus. Program *is* a value, and
  not a sequence of state alterations. Every program in ML has a type. A bunch of
  functional languages have type inference.

  Built around /unification/.

  The five primitive types are: bool, int, real, char and string.

  You can't compare real and int, but you can convert one to another.

  Every if has an else, because every program is a value.

  Functions have a very high precedence.

** Tuples: cartesian product
   Tuples are indexed by 1. There are no one-element tuples.

   Every fun in ML receives only *one* parameter.

   Type contructor = '*'. It's like a fun that receives types and returns types. It's like
   generics in Java and templates in cpp.

** Lists
   Read head and read tail in O(1), same types.
  - [1,2,3];
  /val it = [1,2,3] : int list/
  - [1.0,2.0];
  /val it = [1.0,2.0] : real list/

  @ is O(n). :: is O(1) and associated to the right.

  /Explode/ splits a string into a list of chars.

  If the '$=$' operator appears in a definition of a fun, then real numbers cannot be used.

  You can force a fun to be real (it can come in several places):

    /fun prod(a,b):real = a * b;/

  The output of the type inference can be exponential.
* (21/08/19) Pattern matching in ML
  Undescores are better than a variable that is never going to be used.
  Two '' mean there are no real numbers.
* (26/08/19) Type
  Types are a set of values. Brainfuck and Forth don't have types. Type systems avoid some
  erros.

  Advantages:
   - Documentation
   - Safety
   - Efficiency
   - Correctness

   In C, the size depends of the compiler. R is a language for array manipulation, so is
   matlab and APL.

** Primitive vs Constructed
   Primitive is built-in. Constructed types are just sets built from other sets.

   You can make constructed types by cartesian product, for example.

   In C, an enumeration is a subset of ints. Structs are stored sequentially.

   In Ml, you can only do a /comparison/ with an enumeration.

   The cardinality of a type is the product of its types cardinalities.

** Vectors
   Three abstractions: lists, vectors and strings.

   Vectors are a multidimensional cartesian product of the same set (same type).

** Union
   The cardinality is the /sum/ of the cardinality of its types. The space occupied is the
   largest element's size.
** Functions
   A map that maps the domain to a range. In C, you can pass a function as a parameters
   with a address.
** Static vs Dyamic Typing
   - Static examples: C, Java, /SML/, Cpp, Haskell.
   - Dynamic examples: Python, Javascript, Lisp, PHP, Ruby.

     Static are more efficient. Bigger programs tend to be written in statically typed
     languages. Are more legible.

     Dynamically typed typed languages are more reusable. This kind of reuse is called
     duck typing.

** Strongly vs weakly typed
   A strongly typed language guarantees that a type will be always used as declared.

   - Strongly: haskell, ml.
   - Weakly: c, cpp. Ex: unions, coersion, idexing. Advantage: performance.

* (28/08/19) Polymorfism
** Strategies to discover types
  - Implicit: types are inferred.
    - Inference: the compiler uses an algorithm that finds the correct type of
      each value. Examples: Haskell, Scala, SML.
    - Special names: In some old languages, the name of the variable gives away
      its type. Example: in old Fortran, integer variables should start with 'I'.
  - Explicit: syntax determines types.
    - Annotations: the programmer must explicitly write the type of a symbol
      next to it. Examples: Java, C, C++.

** Equivalence:
   - name equivalence: two types are the same, if, and only if, they have the
     same name: C, Java, C++, etc. Advantage: legibility.
   - structural equivalence: two types are the same if they have the same
     structure. Example: SML. Advantage: reusability.

** Polymorfism
   Python is way more reusable than C or SML. The secret to get closer to Python is
   polymorfism. A function or operator is *polymorphic* if it has at least two possible
   types.

   Which statically typed language gets closer to python? Two types of polymorfism:
   - ad-hoc (infinite symbols)
   - universal
*** Ad-hoc
    - Overload. Uses the types to choose the definition.
    - Coersion. Uses the definition to choose a type conversion.
**** Overload:
     An overloaded function name or operator is one that has at least two definitions, all
     of different types. Many languages have overloaded operators. There are languages
     that allow the programmer to change the meaning of operators.

**** Coersion:
     A coercion is an implicit type conversion, supplied automatically even if the
     programmer leaves it out.
*** Universal
    - Parametric
    - Subtyping
**** Subtyping:
     Barbara Liskov's principle. Subtyping *isn't* the same as inheritance. Not the only
     mecanism to create subptypes.

* (02/09/19) Lambda calculus
** Lambda expressions:  

   Each lambda declares a different name.
  
   #+begin_example
   <expr> ::= <name>
         | \lambda <name> . <expr> |
         | <expr> <expr>           |

   #+end_example   
  

   \[(\lambda x \cdot x) \cdot w\], where


   #+begin_export latex
   \begin{align*}     
     & x_0 = \text{formal parameter} \\
     & x_1 = \text{function body} \\
     & w   = \text{real parameters} \\
   \end{align*}
   #+end_export
         
** Numbers
   A number is a function that takes a function s plus a constant z. The
   number N is formed by applying s N times on z.
   #+begin_example
   Zero = \s.\z.z
   One = \s.\z.sz
   Two = \s.\z.s(sz)
   Three = \s.\z.s(s(sz))
   #+end_example
* (04/09/19) Currying and Higher order
** Currying
   Then it is not possible to implement a function which take multiple parameters? Of
   course, it is possible, by a methodology called currying.In currying every function
   takes only one argument and returns a function. While the last function in this series
   will return the desired output.

** Anonymous Functions
   Starts with /fn/ (lambda functions). You can't do a recursive anonymous function because
   it doesn't have a name. For you to do one, you need the /y combinator/.

   In SML, we can create anonymous functions, e.g: (fn x => x + 2) 3.

   'fn' is the equivalent of lambdas in SML, e.g:
   \x.x is equivalent to fn x => x

   - val ZERO = fn s => fn z => z;
   - val ONE = fn s => fn z => s z;
   - val TWO = fn s => fn z => s (s z);
   - val THREE = fn s => fn z => s (s (s z));

** Higher Order
   Each function has an order:
   - A function that does not take other functions as parameters, and does not return a
     function value, has order 1
   - A function that takes a function as a parameter or returns a function value has order
     n+1, where n is the order of its highest-order parameter or returned value     
**** Foldr and Foldl
     Only return the same when operators are both associative and commutative.
* (11/09/19) Data Types/algebric types
  [[http://www.webber-labs.com/wp-content/uploads/2015/08/mpl-11.pdf][Slides]]
  In C, the union is the closest to algebric types.

  Data constructors :: Labels
  Data Types :: constructors

** Datatype: union in ML
   New types can be defined using the keyword datatype.

   These declarations define both:
   â type constructors for making new (possibly
   polymorphic) types
   â data constructors for making values of those
   new types 

   We've seen two data structures: lists and tuples:

   Lists = nil | e * Lists

   In C, enumerations are like:

   #+BEGIN_SRC c
     #include <stdio.h>
     enum Dia {Mon = 3, Tue, Wed, Thu, Fri, Sat, Sun};
     int main () {
       printf("%d, %d, %d, %d, %d, %d, %d\n",
              Mon, Tue, Wed, Thu, Fri, Sat, Sun);
       printf("%d\n", Mon + Tue);
     }   
   #+END_SRC

   In ML:
  #+BEGIN_SRC sml
    datatype day = Mon | Tue | Wed | Thu | Fri | Sat | Sun;
    fun isWeekDay x = if not (x = Sat orelse x = Sun) then true else false ;
    isWeekDay Mon;
  #+END_SRC

  
#+RESULTS:
: val isWeekDay = fn : day -> bool
** Extint (of)
   To recover a data constructorâs parameters, use pattern matching. You can't do the same
   (pattern matching) with a function.
** Option - type constructors
   Is a polymorphic type. Used by predefined functions (or your own) when the result is
   not always defined
  #+BEGIN_SRC sml
    datatype 'a option = NONE | SOME of 'a;
  #+END_SRC
  
* (19/09/19) Review
  - Ocaml and subtyping
  - Types of languages
  - Elixir and Erlang are on the same VM
  - h::t
  - Context-free: can only have a symbol on the left side of production and produce 0 or
    more things on the right side. Given a string, you can always say if a strig belongs,
    but can't determine wether it's ambiguous (can generate an infinite set of strings).
    - Tokens (terminals)
    - Non-terminals (variables)
    - Production rules
    - Start symbol
  - *Serious*: need to write grammar in prolog (attributes and no attributes). Ex: count number of constants.
  - There are two semantics aspects of languages (for binary operators):
    - Associativity: which operator to evaluate first (right or left).
    - Precedence
  - In ml, :: are associative to the right.
  - Turing Completes need loops.
  - Compile, interpret, and virtualize.
  - In javascript, the browser gets the source code (no binary code). Not x86.
  - Java is ASCII, bytecodes is a binary language executed in a hw called JVM.
  - Scala, clojure, kotlin, groov: jvm.
  - Tuples and lists are the only structures (actually tuples only).
  - List operations
  - The pogram with polynoms doesn't fall in the test
  - The one with the triangles might
  - six patterns in ml: variables, constants, lists, tuples, nil, h
  - Types are a set of values. Brainfuck and Forth don't have types. Type systems avoid some
    erros.
  - The cardinality of a type is the product of its types cardinalities.
  - Vectors are a multidimensional cartesian product of the same set (same type).
  - Tuples have different types
  - In ml, the union is the datatype.  The cardinality is the /sum/ of the cardinality of
    its types. The space occupied is the largest element's size.
  - Cartesians, Vectors, functions and unions.
  - Static examples: C, Java, /SML/, Cpp, Haskell. 
  - Dynamic examples: Python, Javascript, Lisp, PHP, Ruby.
  - Static vs Dyamic, Strongly vs Weak, Nominal vs Structurual, Inference vs annotation. Advantages of each one.
  - Coersion is like converting.
  - Advantage of weakly typed: performance.
  - There's a spectrum of dynamic to static typing.
  - There is a if then else in m.() in java, for example.
  - Types of polymorfirsm
  - Polymorfistm is about statically typed languages. It's point is to get statically typed to be more reusable.
  - hd function in ml, e.g, is polymorfic.
  - differnce in universal and ad-hoc.
  - VAI CAIR OCAML e subtyping.
  - Watch out with renaming in lambda-calculus (avoid variable captures).
  - Operations with church number, you gotta know how to do. No succ
    declaration. Implement add given succ. Convert church number to int.
  - Map, filter e fold.
  - Scope is a region where a symbol exists.
  - Almost every language is static scope.
  - *Bash* is the only dynamic que presta.
  - Two types of forming scope: blocks and namespaces.
  - A tree can be a tree or 2 elements plus a tree.
  - 
